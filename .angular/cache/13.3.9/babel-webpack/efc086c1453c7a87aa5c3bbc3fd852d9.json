{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.API_URL = 'https://api.github.com/repos/angular/angular/issues';\n      this.dataChange = new BehaviorSubject([]);\n    }\n\n    get data() {\n      return this.dataChange.value;\n    }\n\n    getDialogData() {\n      return this.dialogData;\n    }\n    /** CRUD METHODS */\n\n\n    getAllIssues() {\n      this.httpClient.get(this.API_URL).subscribe(data => {\n        this.dataChange.next(data);\n      }, error => {\n        console.log(error.name + ' ' + error.message);\n      });\n    } // DEMO ONLY, you can find working methods below\n\n\n    addIssue(issue) {\n      this.dialogData = issue;\n    }\n\n    updateIssue(issue) {\n      this.dialogData = issue;\n    }\n\n    deleteIssue(id) {\n      console.log(id);\n    }\n\n  }\n\n  DataService.ɵfac = function DataService_Factory(t) {\n    return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  DataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataService,\n    factory: DataService.ɵfac\n  });\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module"}